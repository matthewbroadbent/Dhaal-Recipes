/*
  # Create recipes table

  1. New Tables
    - `recipes`
      - `id` (bigint, primary key)
      - `created_at` (timestamp with time zone)
      - `name` (text, not null)
      - `description` (text, not null)
      - `image` (text)
      - `prep_time` (integer, not null)
      - `cook_time` (integer, not null)
      - `servings` (integer, not null)
      - `spice_level` (text, not null)
      - `flavors` (text array, not null)
      - `ingredients` (text array, not null)
      - `instructions` (text array, not null)
      - `tips` (text array)
      - `author_name` (text, not null)
      - `author_email` (text, not null)
      - `is_approved` (boolean, not null, default false)
  
  2. Security
    - Enable RLS on `recipes` table
    - Add policy for authenticated users to insert their own recipes
    - Add policy for anyone to read approved recipes
    - Add policy for admins to read all recipes
*/

-- Create recipes table
CREATE TABLE IF NOT EXISTS recipes (
  id bigint GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  created_at timestamp with time zone DEFAULT now() NOT NULL,
  name text NOT NULL,
  description text NOT NULL,
  image text,
  prep_time integer NOT NULL,
  cook_time integer NOT NULL,
  servings integer NOT NULL,
  spice_level text NOT NULL,
  flavors text[] NOT NULL,
  ingredients text[] NOT NULL,
  instructions text[] NOT NULL,
  tips text[],
  author_name text NOT NULL,
  author_email text NOT NULL,
  is_approved boolean NOT NULL DEFAULT false
);

-- Enable Row Level Security
ALTER TABLE recipes ENABLE ROW LEVEL SECURITY;

-- Create policy for anyone to read approved recipes
CREATE POLICY "Anyone can view approved recipes"
  ON recipes
  FOR SELECT
  USING (is_approved = true);

-- Create policy for authenticated users to insert their own recipes
CREATE POLICY "Authenticated users can insert recipes"
  ON recipes
  FOR INSERT
  TO authenticated
  WITH CHECK (true);

-- Create policy for admins to read all recipes (including unapproved)
CREATE POLICY "Admins can view all recipes"
  ON recipes
  FOR SELECT
  TO authenticated
  USING (
    auth.jwt() -> 'app_metadata' ->> 'role' = 'admin'
  );

-- Create policy for admins to update recipes
CREATE POLICY "Admins can update recipes"
  ON recipes
  FOR UPDATE
  TO authenticated
  USING (
    auth.jwt() -> 'app_metadata' ->> 'role' = 'admin'
  )
  WITH CHECK (
    auth.jwt() -> 'app_metadata' ->> 'role' = 'admin'
  );